# Golang Errors
Designing application errors
9 Nov 2021
Tags: golang, errors
Summary: error handling in golang


Alex Tan Hong Pin
Engineer
alextan220990@gmail.com
https://alextanhongpin.github.io/


## Application errors

End-users perspective:
- Email is invalid
- You do not have permission to approve this. Please send an email to admin@yourcompany.com to request approval.
- Please attach your resume before submitting.

Monitoring agent perspective:
- `{"error": "Email is invalid"}`
- hello testing

## Error representation

The minimal field required for generic errors:

.code domain/errors/errors.go /^type Error/,/\}/


## Error Kinds

- `Kind` describes the breakdown of errors

.code domain/errors/kind.go /^type Kind/,/\)/

## Error Codes

- Unique identifier for each error type
- Example of error codes as `errors.toml`:

.code domain/entity/user/errors.toml

## Registering Errors

- `errors.C` loads errors by error code
- `errors.P` loads partial errors by error code

.code domain/entity/user/user.go /\/\/go\:/,/Age/ HLxx

## Error category

Errors can generally be separated into three main category:
- validation errors
- domain errors
- internal errors

## Validation errors

When user provides a bad input
- missing fields on required fields (or extra fields)
- zero values (empty string, 0 number)
- boundaries (min/max)

## Domain errors

When business rules fails to execute
- invalid state transition
- impossible states (negative balance, creating orders when out of stock,
	making purchases when no balance)
- unauthorized (lacking permission)
- duplicate entity creation (e.g. creating two same category)

May overlap a little with validation errors. Generally usecases expects inputs
to be fully sanitized and validated, hence if you find yourself duplicating
errors, you can just perform an input validation, and panic (in golang) or
throw exceptions in usecases when they appear to be invalid later (or bypassing
the initial input validation).

## Internal errors

Usually technical errors such as database, network etc
- failed database constraints
- trigger failure
- failure when making HTTP requests

When putting business logic in database (triggers, constraints, uniqueness, not null), you might want to translate them back to domain errors where possible.

## Error JSON

Validation error:
```json
{
	"error": {
		"kind": "BAD_INPUT",
		"code": "account.badInput",
		"message": "Validation failed for account creation",
		"fields": [
			{
				"name": "email",
				"reason": "Email format is invalid"
			},
			{
				"name": "password",
				"reason": "Password too short"
			}
		]
	}
}
```

Failed precondition:
```json
{
	"error": {
		"kind": "FAILED_PRECONDITION",
		"code": "account.duplicate",
		"message": "An account with the email already exists"
	}
}
```

## Pre/Post-validation


- Pre: return flags that indicates something can be done
- Post: execute, then return errors

## Errors across layers

- Database errors
- API errors
- conversion to and from


## Public and private errors

- Some errors should be visible to end users (aka validation error), while others not only through monitoring agent (database error, network error)
- How to separate them?

## Fail fast or validate as whole

- Complex forms on the Frontend requires detail errors for each fields
- Monitoring agent requires sufficient information for when errors happens
- Fail fast: return on first error, validate as whole: return aggregated errors


## Designing errors

- Frontend Client: REST (Problem detail?) and GraphQL
- Monitoring agent: serializable JSON errors

## Action, location and reason

- Action: failed to create user
- Location: email
- Reason: email is invalid


## Actionables from errors

- fix the issue
- add more context to vague errors
- alert on threshold exceeded
- retries


## Tracing errors

- correlation ids
- opentracing


## Pattern language for errors

- Important to standardize
- Technical vs laymen
- Noun based: Account creation failed when validating email
- Verb based: Failed to create account/Create account failed
- use pattern: <operation> failed at <location> because <reason>, Create account failed at email validation because email exists.

## Bulk errors

For bulk operations, like uploading CSV with thousands of rows
- fail fast?
- summary of errors: n rows failed because of ...
